version: "3"

########################### NETWORKS
networks:
  default:
    driver: bridge
    # https://mlohr.com/docker-mtu/
    # driver_opts:
    #   com.docker.network.driver.mtu: 1454
    ipam:
      config:
        - subnet: 172.18.0.0/24
  traefik:
    name: traefik
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/24
  pihole:
    name: pihole
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  metrics:
    name: metrics
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

########################### EXTENSION FIELDS
#
# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

########################### SERVICES
services:
  # Homepage/bookmark service
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    entrypoint:
      - /init
    environment:
      <<: *default-tz-puid-pgid
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      S6_BEHAVIOUR_IF_STAGE2_FAILS: 2
    networks:
      - traefik
    ports:
      - "$HEIMDALL_PORT:80/tcp"
    volumes:
      - $DOCKERDIR/heimdall:/config
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.heimdall-rtr.entrypoints: https
      traefik.http.routers.heimdall-rtr.rule: Host(`heimdall.$DOMAINNAME`)
      traefik.http.routers.heimdall-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.heimdall-rtr.middlewares: chain-oauth@file
      traefik.http.routers.heimdall-rtr.service: heimdall-svc
      traefik.http.services.heimdall-svc.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-slIf", "http://localhost"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Homepage - Application Dashboard
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - traefik
      - socket_proxy
    ports:
      - "$HOMEPAGE_PORT:3000"
    volumes:
      - $DOCKERDIR/homepage:/app/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      traefik.enable: true
      ## HTTP Routers
      traefik.http.routers.homepage-rtr.entrypoints: https
      traefik.http.routers.homepage-rtr.rule: Host(`homepage.$DOMAINNAME1`) || Host(`www.$DOMAINNAME1`) || Host(`$DOMAINNAME1`)
      traefik.http.routers.homepage-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.homepage-rtr.middlewares: chain-oauth@file
      traefik.http.routers.homepage-rtr.service: homepage-svc
      traefik.http.services.homepage-svc.loadbalancer.server.port: 3000

  esphome:
    container_name: esphome
    image: ghcr.io/esphome/esphome:stable
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/esphome-config:/config
      - "/etc/localtime:/etc/localtime:ro"
    privileged: true
    environment:
      <<: *default-tz-puid-pgid
    network_mode: host
#    networks:
#      - traefik
#    ports:
#      - "6052:6052/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik (moved to rules file)
      # traefik.enable: true
      # traefik.docker.network: traefik
      # traefik.http.routers.esphome-rtr.entrypoints: https
      # traefik.http.routers.esphome-rtr.rule: Host(`esphome.$DOMAINNAME`)
      # traefik.http.routers.esphome-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.esphome-rtr.middlewares: chain-oauth@file
      # traefik.http.routers.esphome-rtr.service: esphome-svc
      # traefik.http.services.esphome-svc.loadbalancer.server.port: 6052

#  mdns_reflector:
#    container_name: mdns_reflector
#    image: docker.io/yuxzhu/mdns-reflector:latest
#    command: mdns-reflector -fnl info -- eno1 br-59962d08e1b2
#    network_mode: host
#    restart: unless-stopped
#    # privileged: true
#    environment:
#     <<: *default-tz-puid-pgid

  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwave-js-ui:latest
    # image: zwavejs/zwave-js-ui:8.22.0
    restart: unless-stopped
    tty: true
    stop_signal: SIGINT
    depends_on:
      - mosquitto # I don't think this is true
    environment:
      <<: *default-tz-puid-pgid
    devices:
      - '/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300387-if00-port0:/dev/zwave'
    volumes:
      - $DOCKERDIR/zwavejs2mqtt:/usr/src/app/store
    networks:
      - traefik
    ports:
      - "$ZWAVEJS_WEB_PORT:8091/tcp"
      - "$ZWAVEJS_WS_PORT:3000"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.zwavejs2mqtt-rtr.entrypoints: https
      traefik.http.routers.zwavejs2mqtt-rtr.rule: Host(`zwavejs2mqtt.$DOMAINNAME`) || Host(`zwavejs.$DOMAINNAME`)
      traefik.http.routers.zwavejs2mqtt-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.zwavejs2mqtt-rtr.middlewares: chain-oauth@file
      traefik.http.routers.zwavejs2mqtt-rtr.service: zwavejs2mqtt-svc
      traefik.http.services.zwavejs2mqtt-svc.loadbalancer.server.port: 8091
    healthcheck:
      test: ["CMD-SHELL", "wget -S -O - --header 'Accept: text/plain' http://localhost:$ZWAVEJS_WEB_PORT/health/zwave"]
      interval: 120s
      timeout: 10s
      retries: 4

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/mosquitto:/mosquitto
    ports:
      - "$MOSQUITTO_HTTP_PORT:1883" #http
      - "9001:9001" #websockets
    environment:
      <<: *default-tz-puid-pgid

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped
    depends_on:
      - mosquitto
    devices:
      - '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0:/dev/ttyUSB0'
    networks:
      - traefik
    extra_hosts:
      - "host.docker.internal:$SERVER_IP"
    ports:
      - "$ZIGBEE2MQTT_WEB_PORT:8080/tcp"
    volumes:
      - $DOCKERDIR/zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    environment:
      <<: *default-tz-puid-pgid
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.zigbee2mqtt-rtr.entrypoints: https
      traefik.http.routers.zigbee2mqtt-rtr.rule: Host(`zigbee2mqtt.$DOMAINNAME`)
      traefik.http.routers.zigbee2mqtt-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.zigbee2mqtt-rtr.middlewares: chain-oauth@file
      traefik.http.routers.zigbee2mqtt-rtr.service: zigbee2mqtt-svc
      traefik.http.services.zigbee2mqtt-svc.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD-SHELL", "wget -S -O - --header 'Accept: text/plain' http://localhost:8080"]
      interval: 120s
      timeout: 10s
      retries: 4

  scrypted:
    image: koush/scrypted
    container_name: scrypted
    restart: unless-stopped
    network_mode: host
    # networks:
    #   - traefik
    # ports:
    #   - "$SCRYPTED_PORT:10443/tcp"
    environment:
      <<: *default-tz-puid-pgid
    # uncomment this and a line below as needed.
    # devices:
    # zwave usb serial device
    #   - /dev/ttyACM0:/dev/ttyACM0
    # all usb devices, such as coral tpu
    #   - /dev/bus/usb:/dev/bus/usb
    volumes:
      - $DOCKERDIR/scrypted:/server/volume
    # logging is noisy and will unnecessarily wear on flash storage.
    # scrypted has per device in memory logging that is preferred.
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik (moved to rules file)
      # traefik.enable: true
      # traefik.docker.network: traefik
      # traefik.http.routers.scrypted-rtr.entrypoints: https
      # traefik.http.routers.scrypted-rtr.rule: Host(`scrypted.$DOMAINNAME`)
      # traefik.http.routers.scrypted-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.scrypted-rtr.middlewares: chain-oauth@file
      # traefik.http.routers.scrypted-rtr.service: scrypted-svc
      # traefik.http.services.scrypted-svc.loadbalancer.server.port: 10443
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "-L", "https://localhost:10443/"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  home-assistant:
    image: homeassistant/home-assistant:stable
    container_name: home-assistant
    restart: unless-stopped
    depends_on:
      - zwavejs2mqtt
      - zigbee2mqtt
    volumes:
      - $DOCKERDIR/home-assistant:/config
      - /run/dbus:/run/dbus:ro # enable bluetooth
    devices:
      - '/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300387-if01-port0:/dev/zigbee'
      # - '/sys/class/bluetooth/hci0/device:/dev/bluetooth'
    network_mode: "host"
    # ports:
      # - "$HOMEASSISTANT_PORT:8123/tcp"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik (moved to rules file)
      # traefik.enable: true
      # traefik.docker.network: traefik
      # traefik.http.routers.homeassistant-rtr.entrypoints: https
      # traefik.http.routers.homeassistant-rtr.rule: Host(`homeassistant.$DOMAINNAME`)
      # traefik.http.routers.homeassistant-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.homeassistant-rtr.middlewares: chain-oauth@file
      # traefik.http.routers.homeassistant-rtr.service: homeassistant-svc
      # traefik.http.services.homeassistant-svc.loadbalancer.server.port: 8123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 60s
      timeout: 5s
      retries: 5

  # DNSSec for pihole
  cloudflared:
    image: crazymax/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
      # Prometheus metrics host and port
      TUNNEL_DNS_METRICS: "0.0.0.0:49312"
      # Listen on all interfaces
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      # Listen on an unprivileged port
      TUNNEL_DNS_PORT: 5053
      TUNNEL_DNS_UPSTREAM: "https://1.1.1.3/dns-query,https://1.0.0.3/dns-query"
    networks:
      pihole:
        ipv4_address: 172.20.0.3
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true

  # DNS cache and blacklist
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    dns:
      - 127.0.0.1
      # cloudflare
      # - 1.1.1.3
      # cleanbrowsing.org
      - 185.228.169.10
      - 185.228.169.11
    secrets:
      - pihole_password
    cap_add:
      - NET_ADMIN
    depends_on:
      - cloudflared
    networks:
      traefik:
      pihole:
        ipv4_address: 172.20.0.2
    ports:
      - "$SERVER_IP:53:53/tcp"
      - "$SERVER_IP:53:53/udp"
        # - "53:53/tcp"
        # - "53:53/udp"
      - "67:67/udp"
      - "8053:80/tcp"
    environment:
      <<: *default-tz-puid-pgid
      PROXY_LOCATION: pihole
      VIRTUAL_HOST: pihole.$DOMAINNAME
      VIRTUAL_PORT: 80
      WEBPASSWORD_FILE: /run/secrets/pihole_password
      ServerIP: $SERVER_IP
      PATH: /opt/pihole:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      ARCH: amd64
      FTL_CMD: no-daemon
      DNSMASQ_USER: root
      VERSION: v4.4
      DNS1: "172.20.0.3#5053"
      # DNS2: "1.1.1.3"
      DNS2: "185.228.169.10"
      DNS3: "185.228.169.11"
    volumes:
      - $DOCKERDIR/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
      - $DOCKERDIR/pihole/etc-pihole:/etc/pihole
      - $DOCKERDIR/pihole/pihole.log:/var/log/pihole.log
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.pihole-rtr.entrypoints: https
      traefik.http.routers.pihole-rtr.rule: Host(`pihole.$DOMAINNAME`)
      traefik.http.routers.pihole-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.pihole-rtr.middlewares: chain-oauth@file
      traefik.http.routers.pihole-rtr.service: pihole-svc
      traefik.http.services.pihole-svc.loadbalancer.server.port: 80

  # Plex Media Server
  plex:
    image: plexinc/pms-docker:plexpass
    container_name: plex
    hostname: Flatline
    restart: unless-stopped
    ipc: private
    entrypoint:
      - /init
    secrets:
      - plex_apitoken
    environment:
      <<: *default-tz-puid-pgid
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      LC_ALL: C.UTF-8
      HOME: /config
      ADVERTISE_IP: "http://$SERVER_IP:$PLEX_PORT/"
      LANG: $LANG
      PLEX_CLAIM: $PLEX_CLAIM
      PLEX_APITOKEN_FILE: /run/secrets/plex_apitoken
    networks:
      - traefik
    ports:
      - "1900:1900/udp"
      - "3005:3005/tcp"
      - "$PLEX_PORT:32400/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469/tcp"
      - "8324:8324/tcp"
    devices:
      - /dev/dri:/dev/dri
      # - /dev/dvb:/dev/dvb
    volumes:
      - $DOCKERDIR/plex:/config
      - $MEDIADIR:/data
      # - $DOCKERDIR/plex-transcode:/transcode
      - /dev/shm:/transcode
    labels:
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.plex-rtr.entrypoints: https
      traefik.http.routers.plex-rtr.rule: Host(`plex.$DOMAINNAME`)
      traefik.http.routers.plex-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.plex-rtr.middlewares: chain-oauth@file
      traefik.http.routers.plex-rtr.service: plex-svc
      traefik.http.services.plex-svc.loadbalancer.server.port: 32400
    healthcheck:
      test: ["CMD-SHELL", "curl -slIf --header @$${PLEX_APITOKEN_FILE} http://localhost:32400"]
      interval: 60s
      timeout: 5s
      retries: 4

  # Usenet download service
  sabnzbd:
    container_name: sabnzbd
    image: lscr.io/linuxserver/sabnzbd:latest
    restart: unless-stopped
    secrets:
      - sabnzbd_password
    environment:
      <<: *default-tz-puid-pgid
      FILE__PASSWORD: /run/secrets/sabnzbd_password
    volumes:
      - $DOCKERDIR/sabnzbd:/config
      - $MEDIADIR/Downloads/completed:/downloads
      - $MEDIADIR/Downloads/incomplete:/incomplete-downloads
    networks:
      - traefik
    ports:
      - "$SABNZBD_PORT:8080/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.sabnzbd-rtr.entrypoints: https
      traefik.http.routers.sabnzbd-rtr.rule: Host(`sabnzbd.$DOMAINNAME`)
      traefik.http.routers.sabnzbd-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.sabnzbd-rtr.middlewares: chain-oauth@file
      traefik.http.routers.sabnzbd-rtr.service: sabnzbd-svc
      traefik.http.services.sabnzbd-svc.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD", "curl", "-slf", "http://localhost:8080/api?output=json&mode=version"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Movie aggregation service
  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    ipc: private
    entrypoint:
      - /init
    secrets:
      - radarr_apikey
    environment:
      <<: *default-tz-puid-pgid
      RADARR_APIKEY_FILE: /run/secrets/radarr_apikey
    volumes:
      - $DOCKERDIR/radarr:/config
      - $MEDIADIR/Downloads/completed:/downloads
      - $MEDIADIR/Movies:/movies
    networks:
      - traefik
    ports:
      - "$RADARR_PORT:7878/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.radarr-rtr.entrypoints: https
      traefik.http.routers.radarr-rtr.rule: Host(`radarr.$DOMAINNAME`)
      traefik.http.routers.radarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.radarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.radarr-rtr.service: radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port: 7878
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${RADARR_APIKEY_FILE} http://localhost:$RADARR_PORT/api/v3/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # TV aggregation service
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    ipc: private
    restart: unless-stopped
    entrypoint:
      - /init
    secrets:
      - sonarr_apikey
    environment:
      <<: *default-tz-puid-pgid
      SONARR_APIKEY_FILE: /run/secrets/sonarr_apikey
    networks:
      - traefik
    ports:
      - "$SONARR_PORT:8989/tcp"
    volumes:
      - $DOCKERDIR/sonarr:/config
      - $MEDIADIR/Downloads/completed:/downloads
      - '$MEDIADIR/TV Shows:/tv'
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.sonarr-rtr.entrypoints: https
      traefik.http.routers.sonarr-rtr.rule: Host(`sonarr.$DOMAINNAME`)
      traefik.http.routers.sonarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.sonarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.sonarr-rtr.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: 8989
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${SONARR_APIKEY_FILE} http://localhost:$SONARR_PORT/api/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Music aggregation service
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    secrets:
      - lidarr_apikey
    environment:
      <<: *default-tz-puid-pgid
      LIDARR_APIKEY_FILE: /run/secrets/lidarr_apikey
    volumes:
      - $DOCKERDIR/lidarr:/config
      - $MEDIADIR/Downloads/completed:/downloads
      - $MEDIADIR/Music:/music
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - traefik
    ports:
      - "$LIDARR_PORT:8686"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.lidarr-rtr.entrypoints: https
      traefik.http.routers.lidarr-rtr.rule: Host(`lidarr.$DOMAINNAME`)
      traefik.http.routers.lidarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.lidarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.lidarr-rtr.service: lidarr-svc
      traefik.http.services.lidarr-svc.loadbalancer.server.port: 8686
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${LIDARR_APIKEY_FILE} http://localhost:$LIDARR_PORT/api/v1/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Password Management Service
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
      ADMIN_TOKEN_FILE: /run/secrets/bitwarden_admin_token
      SMTP_HOST_FILE: /run/secrets/bitwarden_smtp_host
      SMTP_FROM_FILE: /run/secrets/bitwarden_smtp_from
      SMTP_USERNAME_FILE: /run/secrets/bitwarden_smtp_username
      SMTP_PASSWORD_FILE: /run/secrets/bitwarden_smtp_password
      SMTP_PORT: $BITWARDEN_SMTP_PORT
      SMTP_SSL: "true"
      ROCKET_ENV: staging
      ROCKET_PORT: 80
      ROCKET_WORKERS: 10
      PUSH_ENABLED: "true"
      PUSH_INSTALLATION_ID_FILE: /run/secrets/bitwarden_installation_push_id
      PUSH_INSTALLATION_KEY_FILE: /run/secrets/bitwarden_installation_push_key
    secrets:
      - bitwarden_admin_token
      - bitwarden_installation_push_id
      - bitwarden_installation_push_key
      - bitwarden_smtp_host
      - bitwarden_smtp_from
      - bitwarden_smtp_username
      - bitwarden_smtp_password
    networks:
      - traefik
    ports:
      - "$BITWARDEN_PORT:80/tcp"
      - "$BITWARDEN_WS_PORT:3012/tcp"
    volumes:
      - $DOCKERDIR/bitwarden:/data
    working_dir: /
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      # UI
      traefik.http.routers.bitwarden-ui-http.entrypoints: http
      traefik.http.routers.bitwarden-ui-http.middlewares: redirect-https
      traefik.http.routers.bitwarden-ui-http.rule: Host(`bitwarden.$DOMAINNAME`, `vault.$DOMAINNAME`)
      traefik.http.routers.bitwarden-ui-http.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-ui-https.entrypoints: https
      traefik.http.routers.bitwarden-ui-https.rule: Host(`bitwarden.$DOMAINNAME`, `vault.$DOMAINNAME`)
      traefik.http.routers.bitwarden-ui-https.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-ui-https.tls.certresolver: dns-cloudflare
      traefik.http.services.bitwarden-ui-svc.loadbalancer.server.port: 80
      # Enable OAuth
      traefik.http.routers.bitwarden-ui-https.middlewares: chain-oauth@file
      # Disable OAuth
      # traefik.http.routers.bitwarden-ui-https.middlewares: chain-no-auth@file
      # Websocket
      traefik.http.routers.bitwarden-websocket-http.entrypoints: http
      traefik.http.routers.bitwarden-websocket-http.middlewares: redirect-https
      traefik.http.routers.bitwarden-websocket-http.service: bitwarden-websocket-svc
      traefik.http.routers.bitwarden-websocket-http.rule: Host(`bitwarden.$DOMAINNAME`, `vault.$DOMAINNAME`) && PathPrefix(`/notifications/hub`)
      traefik.http.routers.bitwarden-websocket-https.entrypoints: https
      traefik.http.routers.bitwarden-websocket-https.rule: Host(`bitwarden.$DOMAINNAME`, `vault.$DOMAINNAME`) && PathPrefix(`/notifications/hub`)
      traefik.http.routers.bitwarden-websocket-https.service: bitwarden-websocket-svc
      traefik.http.routers.bitwarden-websocket-https.tls.certresolver: dns-cloudflare
      traefik.http.services.bitwarden-websocket-svc.loadbalancer.server.port: 3012
      # Redirect
      traefik.http.middlewares.redirect-https.redirectScheme.permanent: true
      traefik.http.middlewares.redirect-https.redirectScheme.scheme: https
      # OAuth Bypass
      traefik.http.routers.bitwarden-rtr-bypass.entrypoints: https
      # FIXME - May also need PathPrefix(`/api/accounts/prelogin`)
      traefik.http.routers.bitwarden-rtr-bypass.rule: "Host(`bitwarden.$DOMAINNAME`, `vault.$DOMAINNAME`) && (HeadersRegexp(`Origin`, `^(moz|safari-web|chrome)-extension://.*`) || HeadersRegexp(`User-Agent`, `Bitwarden_Mobile.*`) || PathPrefix(`/api/sync`))"
      traefik.http.routers.bitwarden-rtr-bypass.priority: 100
      traefik.http.routers.bitwarden-rtr-bypass.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-rtr-bypass.middlewares: chain-no-auth@file
      traefik.http.routers.bitwarden-rtr-bypass.tls.certresolver: dns-cloudflare

  # Backup service for bitwarden
  bitwarden_backup:
    image: bruceforce/vaultwarden-backup
    container_name: bitwarden_backup
    restart: unless-stopped
    entrypoint:
      - entrypoint.sh
    network_mode: none
    volumes:
      - $DOCKERDIR/bitwarden:/data
      - $DOCKERDIR/bitwarden_backup:/backup
    environment:
      <<: *default-tz-puid-pgid
      UID: $PUID
      GID: $PGID
      CRON_TIME: "0 4 * * *"
      TIMESTAMP: "true"
      DELETE_AFTER: 6
      LOG_LEVEL: DEBUG
      LOG_DIR: /backup/logs
      LOG_DIR_PERMISSIONS: 755
      BACKUP_DIR: /backup
      BACKUP_DIR_PERMISSIONS: 700
      BACKUP_ADD_DATABASE: "true"
      BACKUP_ADD_CONFIG_JSON: "true"
      BACKUP_ADD_ATTACHMENTS: "true"
      BACKUP_ADD_RSA_KEY: "true"
      # - CRONFILE=/etc/crontabs/root
    healthcheck:
      test: ["CMD-SHELL", "stat $${VW_DATABASE_URL} $${BACKUP_DIR}/$$(date +'%Y-%m-%d')-*db.sqlite3"]
      interval: 120s
      timeout: 5s
      retries: 4

  # Container Management Service
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H tcp://socket-proxy:$SOCKET_PROXY_PORT
    security_opt:
      - no-new-privileges:true
    environment:
      <<: *default-tz-puid-pgid
    networks:
      - traefik
      - socket_proxy
    ports:
      - "$PORTAINER_PORT:9000/tcp"
    volumes:
      - $DOCKERDIR/portainer:/data:rw
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.portainer-rtr.entrypoints: https
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.$DOMAINNAME`)
      traefik.http.routers.portainer-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.portainer-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: 9000

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - traefik
      - socket_proxy
    ports:
      - "$DOZZLE_PORT:8080/tcp"
    environment:
      <<: *default-tz-puid-pgid
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:$SOCKET_PROXY_PORT
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.dozzle-rtr.entrypoints: https
      traefik.http.routers.dozzle-rtr.rule: Host(`dozzle.$DOMAINNAME`)
      traefik.http.routers.dozzle-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.dozzle-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      traefik.http.routers.dozzle-rtr.service: dozzle-svc
      traefik.http.services.dozzle-svc.loadbalancer.server.port: 8080

  # Reverse Proxy Service
  traefik:
    image: traefik:2.10
    container_name: traefik
    entrypoint:
      - /entrypoint.sh
    command:
      - traefik
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      # - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --ping=true
      - --log=true
      - --log.level=WARN
      - --log.filePath=/logs/traefik.log
      - --log.format=common
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100
      # - --accessLog.format=json
      # - --accessLog.fields.defaultMode=keep
      # - --accessLog.fields.headers.defaultMode=keep
      # - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket-proxy:$SOCKET_PROXY_PORT
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.defaultrule="Host(`{{ trimPrefix `/` .Name }}.$DOMAINNAME`)"
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Needed to enable unifi-cloudkey and other passthrough applications
      - --serversTransport.insecureSkipVerify=true
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME1
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME1
      - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for domain
      - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for domain
      - --entrypoints.https.http.tls.domains[2].main=$DOMAINNAME3 # Pulls main cert for domain
      - --entrypoints.https.http.tls.domains[2].sans=*.$DOMAINNAME3 # Pulls wildcard cert for domain
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/letsencrypt/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # InfluxDB metrics exporter type.
      # - --metrics.influxdb=true
      # - --metrics.influxdb.address=influxdb:$INFLUXDB_PORT
      # - --metrics.influxdb.database=traefik
      # - --metrics.influxdb.pushinterval=30
      # Prometheus metrics exporter type.
      # - --metrics.prometheus=true
    networks:
      traefik:
        ipv4_address: 172.19.0.254
      socket_proxy:
    ports:
      - "443:443/tcp"
      - "80:80/tcp"
      - "$TRAEFIK_PORT:8080/tcp"
    restart: unless-stopped
    volumes:
      # - $DOCKERDIR/traefik/traefik.yml:/etc/traefik/traefik.yml
      - $DOCKERDIR/traefik/letsencrypt:/letsencrypt
      - $DOCKERDIR/traefik/logs:/logs
      - $DOCKERDIR/traefik/rules:/rules
    secrets:
      - traefik_htpasswd
      - cloudflare_email
      - cloudflare_zone_api_key
      - cloudflare_dns_api_key
    environment:
      CF_API_EMAIL_FILE: /run/secrets/cloudflare_email
      # CF_API_KEY_FILE: /run/secrets/cloudflare_global_api_key
      CF_ZONE_API_TOKEN_FILE: /run/secrets/cloudflare_zone_api_key
      CF_DNS_API_TOKEN_FILE: /run/secrets/cloudflare_dns_api_key
      DOMAINNAME: $DOMAINNAME
      DOMAINNAME1: $DOMAINNAME1
      DOMAINNAME2: $DOMAINNAME2
      DOMAINNAME3: $DOMAINNAME3
      SERVER_IP: $SERVER_IP
      CKG2_IP: $CKG2_IP
      UDM_PRO_IP: $UDM_PRO_IP
      PRINTER_IP: $PRINTER_IP
      HDHOMERUN_IP: $HDHOMERUN_IP
      SYNOLOGY_IP: $SYNOLOGY_IP
      USG_IP: $USG_IP
      POWERWALL_IP: $POWERWALL_IP
      FLATLINE_IP: $FLATLINE_IP
      WINTERMUTE_IP: $WINTERMUTE_IP
      COCKPIT_PORT: $COCKPIT_PORT
      HOMEASSISTANT_IP: $HOMEASSISTANT_IP
      HOMEASSISTANT_PORT: $HOMEASSISTANT_PORT
      HOMEBRIDGE_IP: $HOMEBRIDGE_IP
      HOMEBRIDGE_PORT: $HOMEBRIDGE_PORT
      SCRYPTED_PORT: $SCRYPTED_PORT
      ESPHOME_PORT: $ESPHOME_PORT
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: false
      ## Traefik
      traefik.enable: true
      # traefik.docker.network: traefik
      # Basic auth admin password
      # traefik.http.middlewares.admin.basicauth.usersfile: /run/secrets/traefik_htpasswd
      # HTTP-to-HTTPS Redirect
      traefik.http.routers.http-catchall.entrypoints: http
      traefik.http.routers.http-catchall.rule: HostRegexp(`{host:.+}`)
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.routers.http-catchall.service: noop@internal
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      # Dashboard
      traefik.http.routers.traefik-rtr.entrypoints: https
      traefik.http.routers.traefik-rtr.rule: Host(`traefik.$DOMAINNAME`)
      # traefik.http.routers.traefik-rtr.tls: true
      # traefik.http.routers.traefik-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.traefik-rtr.tls.domains[0].main: "$DOMAINNAME1"
      # traefik.http.routers.traefik-rtr.tls.domains[0].sans: "*.$DOMAINNAME1"
      # traefik.http.routers.traefik-rtr.tls.domains[1].main: "$DOMAINNAME2" # Pulls main cert for second domain
      # traefik.http.routers.traefik-rtr.tls.domains[1].sans: "*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      # traefik.http.routers.traefik-rtr.tls.domains[2].main: "$DOMAINNAME3" # Pulls main cert for second domain
      # traefik.http.routers.traefik-rtr.tls.domains[2].sans: "*.$DOMAINNAME3" # Pulls wildcard cert for second domain
      traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file
      traefik.http.routers.traefik-rtr.service: api@internal
      traefik.http.services.api-svc.loadbalancer.server.port: 8080
      traefik.http.services.traefik-svc.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 60s
      timeout: 5s
      retries: 4

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
    secrets:
      - source: traefik-forward-auth
        target: /config
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - LIFETIME=$OAUTH_LIFETIME
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.oauth-rtr.entrypoints: https
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.$DOMAINNAME`)
      # traefik.http.routers.oauth-rtr.tls: true
      traefik.http.routers.oauth-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - socket_proxy
    volumes:
      - $DOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:$SOCKET_PROXY_PORT

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    environment:
      TZ: $TZ
      WATCHTOWER_SCHEDULE: 0 0 2 * * *
      WATCHTOWER_LABEL_ENABLE: 1
      WATCHTOWER_DEBUG: 'true'
      WATCHTOWER_NOTIFICATIONS: 'shoutrrr'
      WATCHTOWER_NO_STARTUP_MESSAGE: 'true'
      # WATCHTOWER_NOTIFICATION_URL: '/run/secrets/watchtower_notification_url'
      WATCHTOWER_NOTIFICATION_URL: $SHOUTRRR_NOTIFICATION_URL
      DOCKER_HOST: tcp://socket-proxy:$SOCKET_PROXY_PORT
    secrets:
      - watchtower_notification_url
    networks:
      - socket_proxy

  kopia:
    image: kopia/kopia:latest
    container_name: kopia
    restart: unless-stopped
    # Setup the server that provides the web gui
    command:
      - server
      - start
      - --disable-csrf-token-checks
      - --insecure
      - --without-password
      - --address=0.0.0.0:51515
        #- --server-username=USERNAME
        #- --server-password=SECRET_PASSWORD
    environment:
      <<: *default-tz-puid-pgid
      # Set repository password
      KOPIA_PASSWORD: "SECRET"
      USER: "User"
    volumes:
      # Mount local folders needed by kopia
      - $DOCKERDIR/kopia/config:/app/config
      - $DOCKERDIR/kopia/cache:/app/cache
      - $DOCKERDIR/kopia/logs:/app/logs
      # Mount local folders to snapshot
      - $RSYNC_SRC:/data:ro
      - $RSYNC_DST/home-kopia:/repository
    networks:
      - traefik
    ports:
      - 51515:51515
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.kopia-rtr.entrypoints: https
      traefik.http.routers.kopia-rtr.rule: Host(`kopia.$DOMAINNAME`)
      traefik.http.routers.kopia-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.kopia-rtr.middlewares: chain-oauth@file
      traefik.http.routers.kopia-rtr.service: kopia-svc
      traefik.http.services.kopia-svc.loadbalancer.server.port: 51515

#  duplicati:
#    image: lscr.io/linuxserver/duplicati:latest
#    container_name: duplicati
#    restart: no
#    environment:
#      <<: *default-tz-puid-pgid
#      CLI_ARGS: ''
#    volumes:
#      - $DOCKERDIR/duplicati/config:/config
#        # - $DOCKERDIR/duplicati/backups:/backups
#      - $RSYNC_DST:/backups
#        # - $DOCKERDIR/duplicati/source:/source
#      - $RSYNC_SRC:/source
#    networks:
#      - traefik
#    ports:
#      - "$DUPLICATI_PORT:8200/tcp"
#    labels:
#      ## Auto-update
#      com.centurylinklabs.watchtower.enable: true
#      ## Traefik
#      traefik.enable: true
#      traefik.docker.network: traefik
#      traefik.http.routers.duplicati-rtr.entrypoints: https
#      traefik.http.routers.duplicati-rtr.rule: Host(`duplicati.$DOMAINNAME`)
#      traefik.http.routers.duplicati-rtr.tls.certresolver: dns-cloudflare
#      traefik.http.routers.duplicati-rtr.middlewares: chain-oauth@file
#      traefik.http.routers.duplicati-rtr.service: duplicati-svc
#      traefik.http.services.duplicati-svc.loadbalancer.server.port: 8200

  rsync-home:
    container_name: rsync-home
    image: dkruger/rsync-cron:latest
    restart: unless-stopped
    network_mode: none
    environment:
      - "RSYNC_OPTIONS=-avz --delete -e ssh --exclude='*/.local'"
      - "RSYNC_CRONTAB=0 0 * * *"
      - RSYNC_UID=0
      - RSYNC_GID=0
    volumes:
      - $RSYNC_SRC:/rsync_src
      - $RSYNC_DST/home-rsync:/rsync_dst

  calibre:
    image: lscr.io/linuxserver/calibre
    container_name: calibre
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/calibre:/config
      - $MEDIADIR/Books:/books
    networks:
      - traefik
    ports:
      - "$CALIBRE_GUI_PORT:8080/tcp"
      # - "$CALIBRE_SERVER_PORT:8081/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      # Application
      traefik.http.routers.calibre-rtr.entrypoints: https
      traefik.http.routers.calibre-rtr.rule: Host(`calibre.$DOMAINNAME`)
      traefik.http.routers.calibre-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.calibre-rtr.middlewares: chain-oauth@file
      traefik.http.routers.calibre-rtr.service: calibre-svc
      traefik.http.services.calibre-svc.loadbalancer.server.port: 8080
      # Server (disabled)
      # traefik.http.routers.calibre-server-rtr.entrypoints: https
      # traefik.http.routers.calibre-server-rtr.rule: Host(`calibre-server.$DOMAINNAME`)
      # traefik.http.routers.calibre-server-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.calibre-server-rtr.middlewares: chain-oauth@file
      # traefik.http.routers.calibre-server-rtr.service: calibre-server-svc
      # traefik.http.services.calibre-server-svc.loadbalancer.server.port: 8081

  calibre-web:
    image: lscr.io/linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_MODS: linuxserver/mods:universal-calibre #optional
      OAUTHLIB_RELAX_TOKEN_SCOPE: 1 #optional
    volumes:
      - $DOCKERDIR/calibre-web:/config
      - $DOCKERDIR/calibre:/library
      - $MEDIADIR/Books:/books
    networks:
      - traefik
    ports:
      - "$CALIBRE_WEB_PORT:8083/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.calibre-web-rtr.entrypoints: https
      traefik.http.routers.calibre-web-rtr.rule: Host(`calibre-web.$DOMAINNAME`)
      traefik.http.routers.calibre-web-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.calibre-web-rtr.middlewares: chain-oauth@file
      traefik.http.routers.calibre-web-rtr.service: calibre-web-svc
      traefik.http.services.calibre-web-svc.loadbalancer.server.port: 8083

  readarr:
    container_name: readarr
    image: hotio/readarr:nightly
    restart: unless-stopped
    secrets:
      - readarr_apikey
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      READARR_APIKEY_FILE: /run/secrets/readarr_apikey
    volumes:
      - $DOCKERDIR/readarr:/config
      - $MEDIADIR/Books:/books
      - $MEDIADIR/Downloads/completed:/downloads
    networks:
      - traefik
    ports:
      - "$READARR_PORT:8787/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.readarr-rtr.entrypoints: https
      traefik.http.routers.readarr-rtr.rule: Host(`readarr.$DOMAINNAME`)
      traefik.http.routers.readarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.readarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.readarr-rtr.service: readarr-svc
      traefik.http.services.readarr-svc.loadbalancer.server.port: 8787
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${READARR_APIKEY_FILE} http://localhost:$READARR_PORT/api/v1/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  speakarr:
    container_name: speakarr
    image: hotio/readarr:nightly
    restart: unless-stopped
    secrets:
      - speakarr_apikey
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      SPEAKARR_APIKEY_FILE: /run/secrets/speakarr_apikey
    volumes:
      - $DOCKERDIR/speakarr:/config
      - $MEDIADIR/Audiobooks:/audiobooks
      - $MEDIADIR/Downloads/completed:/downloads
    networks:
      - traefik
    ports:
      - "$SPEAKARR_PORT:8787/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.speakarr-rtr.entrypoints: https
      traefik.http.routers.speakarr-rtr.rule: Host(`speakarr.$DOMAINNAME`)
      traefik.http.routers.speakarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.speakarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.speakarr-rtr.service: speakarr-svc
      traefik.http.services.speakarr-svc.loadbalancer.server.port: 8787
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${SPEAKARR_APIKEY_FILE} http://localhost:8787/api/v1/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  tubesync:
    image: ghcr.io/meeb/tubesync:latest
    container_name: tubesync
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/tubesync:/config
      # - $MEDIADIR/Downloads/completed:/downloads
      - $MEDIADIR/YouTube:/downloads
    networks:
      - traefik
    ports:
      - "$TUBESYNC_PORT:4848/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.tubesync-rtr.entrypoints: https
      traefik.http.routers.tubesync-rtr.rule: Host(`tubesync.$DOMAINNAME`)
      traefik.http.routers.tubesync-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.tubesync-rtr.middlewares: chain-oauth@file
      traefik.http.routers.tubesync-rtr.service: tubesync-svc
      traefik.http.services.tubesync-svc.loadbalancer.server.port: 4848

#  lazylibrarian:
#    image: ghcr.io/linuxserver/lazylibrarian
#    container_name: lazylibrarian
#    restart: no
#    environment:
#      <<: *default-tz-puid-pgid
#      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
#    volumes:
#      - $DOCKERDIR/lazylibrarian:/config
#      - $MEDIADIR/Audiobooks:/audiobooks
#      - $MEDIADIR/Books:/books
#      - $MEDIADIR/Downloads:/downloads
#    networks:
#      - traefik
#    ports:
#      - "$LAZYLIBRARIAN_PORT:5299/tcp"
#    labels:
#      ## Auto-update
#      com.centurylinklabs.watchtower.enable: true
#      ## Traefik
#      traefik.enable: true
#      traefik.docker.network: traefik
#      traefik.http.routers.lazylibrarian-rtr.entrypoints: https
#      traefik.http.routers.lazylibrarian-rtr.rule: Host(`lazylibrarian.$DOMAINNAME`)
#      traefik.http.routers.lazylibrarian-rtr.tls.certresolver: dns-cloudflare
#      traefik.http.routers.lazylibrarian-rtr.middlewares: chain-oauth@file
#      traefik.http.routers.lazylibrarian-rtr.service: lazylibrarian-svc
#      traefik.http.services.lazylibrarian-svc.loadbalancer.server.port: 5299

  # InfluxDB - Database for sensor data
#  influxdb:
#    image: influxdb:1.8
#    container_name: influxdb
#    restart: no
#    security_opt:
#      - no-new-privileges:true
#    networks:
#      metrics:
#    ports:
#      - "$INFLUXDB_PORT:8086"
#    volumes:
#      - "$DOCKERDIR/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro"
#      - "$DOCKERDIR/influxdb/db:/var/lib/influxdb"
#    labels:
#      # Auto-update
#      com.centurylinklabs.watchtower.enable: true
#    healthcheck:
#      test: ["CMD", "curl", "-sl", "-I", "http://localhost:$INFLUXDB_PORT/ping"]
#      interval: 120s
#      timeout: 5s
#      retries: 4

#  telegraf:
#    image: telegraf:latest
#    container_name: telegraf
#    restart: no
#    security_opt:
#      - no-new-privileges:true
#    depends_on:
#      - influxdb
#    networks:
#      metrics:
#    extra_hosts:
#      - "powerwall:$POWERWALL_IP"
#    volumes:
#      - "$DOCKERDIR/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
#    labels:
#      # Auto-update
#      com.centurylinklabs.watchtower.enable: true
#    healthcheck:
#      # NOTE: requires outputs.health to be enabled in telegraf.conf
#      test: ["CMD", "curl", "-f", "http://localhost:8080"]
#      interval: 120s
#      timeout: 5s
#      retries: 4
#
  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      traefik:
      metrics:
    depends_on:
      # - influxdb
      - prometheus
    extra_hosts:
      - "powerwall:$POWERWALL_IP"
    user: "0"
    volumes:
      - $DOCKERDIR/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,natel-discrete-panel,natel-plotly-panel,blackmirror1-singlestat-math-panel,btplc-trend-box-panel,marcuscalidus-svg-panel,michaeldmoore-multistat-panel,yesoreyeram-boomtable-panel,ryantxu-ajax-panel,grafana-influxdb-flux-datasource,fetzerch-sunandmoon-datasource,andig-darksky-datasource,simpod-json-datasource"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.grafana-rtr.entrypoints: https
      traefik.http.routers.grafana-rtr.rule: Host(`grafana.$DOMAINNAME`)
      traefik.http.routers.grafana-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.grafana-rtr.middlewares: chain-oauth@file
      traefik.http.routers.grafana-rtr.service: grafana-svc
      traefik.http.services.grafana-svc.loadbalancer.server.port: 3000
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:3000/api/health"]
      interval: 120s
      timeout: 5s
      retries: 4

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      # - "$DOCKERDIR/prometheus:/prometheus"
      - "$DOCKERDIR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      traefik:
      metrics:
    ports:
      - "$PROMETHEUS_PORT:9090"
    extra_hosts:
      - "host.docker.internal:$SERVER_IP"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.prometheus-rtr.entrypoints: https
      traefik.http.routers.prometheus-rtr.rule: Host(`prometheus.$DOMAINNAME`)
      traefik.http.routers.prometheus-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.prometheus-rtr.middlewares: chain-oauth@file
      traefik.http.routers.prometheus-rtr.service: prometheus-svc
      traefik.http.services.prometheus-svc.loadbalancer.server.port: 9090
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 5s
      retries: 4

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host --collector.systemd --collector.processes'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    labels:
      com.centurylinklabs.watchtower.enable: true

  # Cloudflare DDNS - Dynamic DNS Updater
  ddns-updater:
    image: qmcgaw/ddns-updater
    container_name: ddns-updater
    restart: always
    networks:
      - default
      - traefik
    ports:
      - 8000:8000/tcp
    volumes:
      - $DOCKERDIR/ddns-updater:/updater/data # Owned by UID 1000
    environment:
      <<: *default-tz-puid-pgid
        # PERIOD: 1h
        # UPDATE_COOLDOWN_PERIOD: 5m
        # PUBLICIP_FETCHERS: all
        # PUBLICIP_HTTP_PROVIDERS: all
        # PUBLICIPV4_HTTP_PROVIDERS: all
        # PUBLICIPV6_HTTP_PROVIDERS: all
      PUBLICIP_DNS_PROVIDERS: cloudflare
        # PUBLICIP_DNS_TIMEOUT: 3s
        # HTTP_TIMEOUT: 10s
        #
      # Web UI
      LISTENING_PORT: 8000
      # Backup
      BACKUP_PERIOD: 96h # 0 to disable
      BACKUP_DIRECTORY: /updater/data/backups
      # Other
      LOG_LEVEL: info
      SHOUTRRR_ADDRESSES: $SHOUTRRR_NOTIFICATION_URL
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.ddns-updater-rtr.entrypoints: https
      traefik.http.routers.ddns-updater-rtr.rule: Host(`ddns-updater.$DOMAINNAME`)
      traefik.http.routers.ddns-updater-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.ddns-updater-rtr.middlewares: chain-oauth@file
      traefik.http.routers.ddns-updater-rtr.service: ddns-updater-svc
      traefik.http.services.ddns-updater-svc.loadbalancer.server.port: 8000
    healthcheck:
      test: ["CMD", "/updater/app", "healthcheck"]
      interval: 60s
      timeout: 5s
      retries: 2
      start_period: 10s

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: unless-stopped
    networks:
      socket_proxy:
        ipv4_address: 172.22.0.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:$SOCKET_PROXY_PORT:$SOCKET_PROXY_PORT" # Port $SOCKET_PROXY_PORT should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "$SOCKET_PROXY_PORT:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:$SOCKET_PROXY_PORT/_ping"]
      interval: 60s
      timeout: 5s
      retries: 4

  whoami:
    image: containous/whoami
    container_name: whoami
    restart: "no"
    networks:
      - traefik
    labels:
      # Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.whoami-rtr.entrypoints: https
      traefik.http.routers.whoami-rtr.rule: Host(`whoami.$DOMAINNAME`)
      traefik.http.routers.whoami-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.whoami-rtr.middlewares: chain-oauth@file
      traefik.http.routers.whoami-rtr.service: whoami-svc
      traefik.http.services.whoami-svc.loadbalancer.server.port: 80

  # Custom HTTP error handling
  error-pages:
    image: tarampampam/error-pages:latest # Using the latest tag is highly discouraged. Please, use tags in X.Y.Z format
    container_name: error-pages
    restart: unless-stopped
    networks:
      traefik:
    environment:
      TEMPLATE_NAME: l7-dark # lost-in-space
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.error-pages-rtr.entrypoints: https
      traefik.http.routers.error-pages-rtr.rule: HostRegexp(`{catchall:.*}`)
      traefik.http.routers.error-pages-rtr.tls: true
      traefik.http.routers.error-pages-rtr.priority: 1
      traefik.http.routers.error-pages-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.error-pages-rtr.middlewares: chain-no-auth@file
      traefik.http.routers.error-pages-rtr.service: error-handler-svc
      traefik.http.services.error-handler-svc.loadbalancer.server.port: 8080

#  silverbullet:
#    image: zefhemel/silverbullet
#    container_name: silverbullet
#    restart: 'no'
#    ## To enable additional options, such as BasicAuth, uncomment the following line:
#    # command: ["--user=user:pw"]
#    volumes:
#      - $DOCKERDIR/silverbullet:/space
#    networks:
#      - traefik
#    ports:
#      - "$SILVERBULLET_PORT:3000/tcp"
#    labels:
#      ## Auto-update
#      com.centurylinklabs.watchtower.enable: true
#      ## Traefik
#      traefik.enable: true
#      traefik.docker.network: traefik
#      traefik.http.routers.silverbullet-rtr.entrypoints: https
#      traefik.http.routers.silverbullet-rtr.rule: Host(`silverbullet.$DOMAINNAME`)
#      traefik.http.routers.silverbullet-rtr.tls.certresolver: dns-cloudflare
#      traefik.http.routers.silverbullet-rtr.middlewares: chain-oauth@file
#      traefik.http.routers.silverbullet-rtr.service: silverbullet-svc
#      traefik.http.services.silverbullet-svc.loadbalancer.server.port: 3000

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    # profiles: ["core", "all"]
    networks:
      - traefik
      - socket_proxy
    volumes:
      - $DOCKERDIR/uptime-kuma:/app/data
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.uptime-kuma-rtr.entrypoints: https
      traefik.http.routers.uptime-kuma-rtr.rule: Host(`kuma.$DOMAINNAME`)
      traefik.http.routers.uptime-kuma-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.uptime-kuma-rtr.middlewares: chain-oauth@file
      traefik.http.routers.uptime-kuma-rtr.service: uptime-kuma-svc
      traefik.http.services.uptime-kuma-svc.loadbalancer.server.port: 3001

  librespeed:
    image: lscr.io/linuxserver/librespeed:latest
    container_name: librespeed
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      <<: *default-tz-puid-pgid
#      CUSTOM_RESULTS: false #optional
#      DB_TYPE: sqlite #optional
#      DB_NAME: DB_NAME #optional
#      DB_HOSTNAME: DB_HOSTNAME #optional
#      DB_USERNAME: DB_USERNAME #optional
#      DB_PASSWORD: DB_PASSWORD #optional
#      DB_PORT: DB_PORT #optional
#      IPINFO_APIKEY: ACCESS_TOKEN #optional
    volumes:
      - $DOCKERDIR/librespeed:/config
    networks:
      - traefik
    ports:
      - $LIBRESPEED_PORT:80
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.librespeed-rtr.entrypoints: https
      traefik.http.routers.librespeed-rtr.rule: Host(`librespeed.$DOMAINNAME`)
      traefik.http.routers.librespeed-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.librespeed-rtr.middlewares: chain-oauth@file
      traefik.http.routers.librespeed-rtr.service: librespeed-svc
      traefik.http.services.librespeed-svc.loadbalancer.server.port: 80

  mqtt-explorer:
    image: smeagolworms4/mqtt-explorer:latest
    container_name: mqtt-explorer
    restart: unless-stopped
    depends_on:
      - mosquitto # I don't think this is true
    environment:
      <<: *default-tz-puid-pgid
      HTTP_PORT: 4000
      CONFIG_PATH: /config
    volumes:
      - $DOCKERDIR/mqtt-explorer:/config
    networks:
      - traefik
      - default
    ports:
      - $MQTT_EXPLORER_PORT:4000
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.mqtt-explorer-rtr.entrypoints: https
      traefik.http.routers.mqtt-explorer-rtr.rule: Host(`mqtt-explorer.$DOMAINNAME`)
      traefik.http.routers.mqtt-explorer-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.mqtt-explorer-rtr.middlewares: chain-oauth@file
      traefik.http.routers.mqtt-explorer-rtr.service: mqtt-explorer-svc
      traefik.http.services.mqtt-explorer-svc.loadbalancer.server.port: 4000

########################### SECRETS
secrets:
  traefik_htpasswd:
    file: $SECRETSDIR/traefik_htpasswd
  traefik-forward-auth:
    file: $SECRETSDIR/traefik-forward-auth
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cf_email:
    file: $SECRETSDIR/cloudflare_email
  cf_token:
    file: $SECRETSDIR/cloudflare_ddns_api_key
  cloudflare_dns_api_key:
    file: $SECRETSDIR/cloudflare_dns_api_key
  cloudflare_zone_api_key:
    file: $SECRETSDIR/cloudflare_zone_api_key
  pihole_password:
    file: $SECRETSDIR/pihole_password
  bitwarden_admin_token:
    file: $SECRETSDIR/bitwarden_admin_token
  bitwarden_installation_push_id:
    file: $SECRETSDIR/bitwarden_installation_push_id
  bitwarden_installation_push_key:
    file: $SECRETSDIR/bitwarden_installation_push_key
  radarr_apikey:
    file: $SECRETSDIR/radarr_apikey
  sabnzbd_password:
    file: $SECRETSDIR/sabnzbd_password
  sonarr_apikey:
    file: $SECRETSDIR/sonarr_apikey
  lidarr_apikey:
    file: $SECRETSDIR/lidarr_apikey
  readarr_apikey:
    file: $SECRETSDIR/readarr_apikey
  speakarr_apikey:
    file: $SECRETSDIR/speakarr_apikey
  plex_apitoken:
    file: $SECRETSDIR/plex_apitoken
  healthchecks_superuser_email:
    file: $SECRETSDIR/healthchecks_superuser_email
  healthchecks_superuser_password:
    file: $SECRETSDIR/healthchecks_superuser_password
  bitwarden_smtp_host:
    file: $SECRETSDIR/bitwarden_smtp_host
  bitwarden_smtp_from:
    file: $SECRETSDIR/bitwarden_smtp_from
  bitwarden_smtp_username:
    file: $SECRETSDIR/bitwarden_smtp_username
  bitwarden_smtp_password:
    file: $SECRETSDIR/bitwarden_smtp_password
  watchtower_notification_url:
    file: $SECRETSDIR/watchtower_notification_url
