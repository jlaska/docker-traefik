version: "3.5"
services:
  # Homepage/bookmark service
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    entrypoint:
      - /init
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - S6_BEHAVIOUR_IF_STAGE2_FAILS=2
    networks:
      - traefik
    ports:
      - "$HEIMDALL_PORT:80/tcp"
    volumes:
      - $DOCKERDIR/heimdall:/config
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.heimdall-rtr.entrypoints: https
      traefik.http.routers.heimdall-rtr.rule: Host(`www.$DOMAINNAME`)
      traefik.http.routers.heimdall-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.heimdall-rtr.middlewares: chain-oauth@file
      traefik.http.routers.heimdall-rtr.service: heimdall-svc
      traefik.http.services.heimdall-svc.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-slIf", "http://localhost"]
      interval: 120s
      timeout: 10s
      retries: 4

  # HomeKit bridge
  homebridge:
    image: oznu/homebridge:latest
    container_name: homebridge
    entrypoint:
      - /init
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - PACKAGES=ffmpeg,ffmpeg-libs,libpcap-dev
      - HOMEBRIDGE_INSECURE=1
      - HOMEBRIDGE_DEBUG=0
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=$HOMEBRIDGE_PORT
    hostname: $SERVER_HOSTNAME
    network_mode: "host"
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/homebridge:/homebridge
    working_dir: /homebridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:$HOMEBRIDGE_PORT"]
      interval: 120s
      timeout: 10s
      retries: 4

  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt:latest
    restart: unless-stopped
    tty: true
    stop_signal: SIGINT
    environment:
        # - SESSION_SECRET=mysupersecretkey
      - TZ=$TZ
    devices:
      - '/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300387-if00-port0:/dev/zwave'
    volumes:
      - $DOCKERDIR/zwavejs2mqtt:/usr/src/app/store
    networks:
      - traefik
    ports:
      - "$ZWAVEJS_WEB_PORT:8091/tcp"
      - "$ZWAVEJS_WS_PORT:3000"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.zwavejs2mqtt-rtr.entrypoints: https
      traefik.http.routers.zwavejs2mqtt-rtr.rule: Host(`zwavejs2mqtt.$DOMAINNAME`) || Host(`zwavejs.$DOMAINNAME`)
      traefik.http.routers.zwavejs2mqtt-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.zwavejs2mqtt-rtr.middlewares: chain-oauth@file
      traefik.http.routers.zwavejs2mqtt-rtr.service: zwavejs2mqtt-svc
      traefik.http.services.zwavejs2mqtt-svc.loadbalancer.server.port: $ZWAVEJS_WEB_PORT
    healthcheck:
      test: ["CMD-SHELL", "wget -S -O - --header 'Accept: text/plain' http://localhost:$ZWAVEJS_WEB_PORT/health/zwave"]
      interval: 120s
      timeout: 10s
      retries: 4

  homeassistant:
    image: homeassistant/home-assistant:stable
    container_name: home-assistant
    restart: unless-stopped
    depends_on:
      - zwavejs2mqtt
    volumes:
      - $DOCKERDIR/homeassistant:/config
    devices:
      - '/dev/serial/by-id/usb-Silicon_Labs_HubZ_Smart_Home_Controller_C1300387-if01-port0:/dev/zigbee'
    network_mode: "host"
    ports:
      - "$HOMEASSISTANT_PORT:8123/tcp"
    environment:
      - TZ=$TZ
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: false
      ## Traefik
      # traefik.enable: true
      # traefik.docker.network: traefik
      # traefik.http.routers.homeassistant-rtr.entrypoints: https
      # traefik.http.routers.homeassistant-rtr.rule: Host(`homeassistant.$DOMAINNAME`)
      # traefik.http.routers.homeassistant-rtr.tls.certresolver: dns-cloudflare
      # traefik.http.routers.homeassistant-rtr.middlewares: chain-oauth@file
      # traefik.http.routers.homeassistant-rtr.service: homeassistant-svc
      # traefik.http.services.homeassistant-svc.loadbalancer.server.port: 8123
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123"]
      interval: 60s
      timeout: 5s
      retries: 5

  # DNSSec for pihole
  cloudflared:
    image: crazymax/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      # Prometheus metrics host and port
      - TUNNEL_DNS_METRICS=0.0.0.0:49312
      # Listen on all interfaces
      - TUNNEL_DNS_ADDRESS=0.0.0.0
      # Listen on an unprivileged port
      - TUNNEL_DNS_PORT=5053
      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
    networks:
      pihole:
        ipv4_address: 172.20.0.3
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true

  # DNS cache and blacklist
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: unless-stopped
    dns:
      - 127.0.0.1
      - 1.1.1.1
    secrets:
      - pihole_password
    cap_add:
      - NET_ADMIN
    depends_on:
      - cloudflared
    networks:
      traefik:
      pihole:
        ipv4_address: 172.20.0.2
    ports:
      - "$SERVER_IP:53:53/tcp"
      - "$SERVER_IP:53:53/udp"
        # - "53:53/tcp"
        # - "53:53/udp"
      - "67:67/udp"
      - "8053:80/tcp"
    environment:
      - PROXY_LOCATION=pihole
      - VIRTUAL_HOST=pihole.$DOMAINNAME
      - VIRTUAL_PORT=80
      - TZ=$TZ
      - WEBPASSWORD_FILE=/run/secrets/pihole_password
      - ServerIP=$SERVER_IP
      - PATH=/opt/pihole:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - ARCH=amd64
      - FTL_CMD=no-daemon
      - DNSMASQ_USER=root
      - VERSION=v4.4
      - "DNS1=172.20.0.3#5053"
      - "DNS2=1.1.1.1"
    volumes:
      - $DOCKERDIR/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
      - $DOCKERDIR/pihole/etc-pihole:/etc/pihole
      - $DOCKERDIR/pihole/pihole.log:/var/log/pihole.log
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.pihole-rtr.entrypoints: https
      traefik.http.routers.pihole-rtr.rule: Host(`pihole.$DOMAINNAME`)
      traefik.http.routers.pihole-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.pihole-rtr.middlewares: chain-oauth@file
      traefik.http.routers.pihole-rtr.service: pihole-svc
      traefik.http.services.pihole-svc.loadbalancer.server.port: 80

  # Plex Media Server
  plex:
    image: plexinc/pms-docker:plexpass
    container_name: plex
    hostname: Flatline
    restart: unless-stopped
    ipc: private
    entrypoint:
      - /init
    secrets:
      - plex_apitoken
    environment:
      - TZ=$TZ
      - PLEX_UID=$PUID
      - PLEX_GID=$PGID
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - LC_ALL=C.UTF-8
      - HOME=/config
      - ADVERTISE_IP=http://$SERVER_IP:$PLEX_PORT/
      - LANG=$LANG
      - PLEX_CLAIM=$PLEX_CLAIM
      - PLEX_APITOKEN_FILE=/run/secrets/plex_apitoken
    networks:
      - traefik
    ports:
      - "1900:1900/udp"
      - "3005:3005/tcp"
      - "$PLEX_PORT:32400/tcp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469/tcp"
      - "8324:8324/tcp"
    devices:
      - /dev/dri:/dev/dri
      # - /dev/dvb:/dev/dvb
    volumes:
      - $DOCKERDIR/plex:/config
      - $MEDIADIR:/data
      # - $DOCKERDIR/plex-transcode:/transcode
      - /dev/shm:/transcode
    labels:
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.plex-rtr.entrypoints: https
      traefik.http.routers.plex-rtr.rule: Host(`plex.$DOMAINNAME`)
      traefik.http.routers.plex-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.plex-rtr.middlewares: chain-oauth@file
      traefik.http.routers.plex-rtr.service: plex-svc
      traefik.http.services.plex-svc.loadbalancer.server.port: $PLEX_PORT
    healthcheck:
      test: ["CMD-SHELL", "curl -slIf --header @$${PLEX_APITOKEN_FILE} http://localhost:$PLEX_PORT"]
      interval: 60s
      timeout: 5s
      retries: 4

  # Usenet download service
  nzbget:
    container_name: nzbget
    entrypoint:
      - /init
    environment:
      - PGID=$PGID
      - PUID=$PUID
      - TZ=$TZ
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - HOME=/root
    image: linuxserver/nzbget:latest
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.nzbget-rtr.entrypoints: https
      traefik.http.routers.nzbget-rtr.rule: Host(`nzbget.$DOMAINNAME`)
      traefik.http.routers.nzbget-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.nzbget-rtr.middlewares: chain-oauth@file
      traefik.http.routers.nzbget-rtr.service: nzbget-svc
      traefik.http.services.nzbget-svc.loadbalancer.server.port: $NZBGET_PORT
    networks:
      - traefik
    ports:
      - "$NZBGET_PORT:6789/tcp"
    restart: unless-stopped
    volumes:
      - $MEDIADIR/Downloads:/downloads
      - $DOCKERDIR/nzbget:/config
    healthcheck:
      test: ["CMD", "curl", "-slf", "http://localhost:$NZBGET_PORT/jsonrpc/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Movie aggregation service
  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    ipc: private
    entrypoint:
      - /init
    secrets:
      - radarr_apikey
    environment:
      - PGID=$PGID
      - PUID=$PUID
      - TZ=$TZ
      - LANGUAGE=$LANG
      - LANG=$LANG
      - RADARR_APIKEY_FILE=/run/secrets/radarr_apikey
    volumes:
      - $DOCKERDIR/radarr:/config
      - $MEDIADIR/Downloads:/downloads
      - $MEDIADIR/Movies:/movies
    networks:
      - traefik
    ports:
      - "$RADARR_PORT:7878/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.radarr-rtr.entrypoints: https
      traefik.http.routers.radarr-rtr.rule: Host(`radarr.$DOMAINNAME`)
      traefik.http.routers.radarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.radarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.radarr-rtr.service: radarr-svc
      traefik.http.services.radarr-svc.loadbalancer.server.port: $RADARR_PORT
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${RADARR_APIKEY_FILE} http://localhost:$RADARR_PORT/api/v3/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # TV aggregation service
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    ipc: private
    restart: unless-stopped
    entrypoint:
      - /init
    secrets:
      - sonarr_apikey
    environment:
      - TZ=$TZ
      - PGID=$PGID
      - PUID=$PUID
      - LANGUAGE=$LANG
      - LANG=$LANG
      - SONARR_APIKEY_FILE=/run/secrets/sonarr_apikey
    networks:
      - traefik
    ports:
      - "$SONARR_PORT:8989/tcp"
    volumes:
      - '$MEDIADIR//TV Shows:/tv'
      - $DOCKERDIR/sonarr:/config
      - $MEDIADIR/Downloads:/downloads
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.sonarr-rtr.entrypoints: https
      traefik.http.routers.sonarr-rtr.rule: Host(`sonarr.$DOMAINNAME`)
      traefik.http.routers.sonarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.sonarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.sonarr-rtr.service: sonarr-svc
      traefik.http.services.sonarr-svc.loadbalancer.server.port: $SONARR_PORT
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${SONARR_APIKEY_FILE} http://localhost:$SONARR_PORT/api/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Music aggregation service
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    secrets:
      - lidarr_apikey
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      LIDARR_APIKEY_FILE: /run/secrets/lidarr_apikey
    volumes:
      - $DOCKERDIR/lidarr:/config
      - $MEDIADIR/Downloads:/downloads
      - $MEDIADIR/Music:/music
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - traefik
    ports:
      - "$LIDARR_PORT:8686"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.lidarr-rtr.entrypoints: https
      traefik.http.routers.lidarr-rtr.rule: Host(`lidarr.$DOMAINNAME`)
      traefik.http.routers.lidarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.lidarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.lidarr-rtr.service: lidarr-svc
      traefik.http.services.lidarr-svc.loadbalancer.server.port: $LIDARR_PORT
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${LIDARR_APIKEY_FILE} http://localhost:$LIDARR_PORT/api/v1/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  # Password Management Service
  bitwarden:
    # image: bitwardenrs/server:1.18.0
    image: bitwardenrs/server:latest
    container_name: bitwarden
    restart: unless-stopped
    environment:
      - ADMIN_TOKEN_FILE=/run/secrets/bitwarden_admin_token
      - SMTP_HOST_FILE=/run/secrets/bitwarden_smtp_host
      - SMTP_FROM_FILE=/run/secrets/bitwarden_smtp_from
      - SMTP_USERNAME_FILE=/run/secrets/bitwarden_smtp_username
      - SMTP_PASSWORD_FILE=/run/secrets/bitwarden_smtp_password
      - SMTP_PORT=$BITWARDEN_SMTP_PORT
      - SMTP_SSL=true
      - ROCKET_ENV=staging
      - ROCKET_PORT=80
      - ROCKET_WORKERS=10
    secrets:
      - bitwarden_admin_token
      - bitwarden_smtp_host
      - bitwarden_smtp_from
      - bitwarden_smtp_username
      - bitwarden_smtp_password
    networks:
      - traefik
    ports:
      - "$BITWARDEN_PORT:80/tcp"
    volumes:
      - $DOCKERDIR/bitwarden:/data
    working_dir: /
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      # UI
      traefik.http.routers.bitwarden-ui-http.entrypoints: http
      traefik.http.routers.bitwarden-ui-http.middlewares: redirect-https
      traefik.http.routers.bitwarden-ui-http.rule: Host(`bitwarden.$DOMAINNAME`)
      traefik.http.routers.bitwarden-ui-http.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-ui-https.entrypoints: https
      traefik.http.routers.bitwarden-ui-https.rule: Host(`bitwarden.$DOMAINNAME`)
      traefik.http.routers.bitwarden-ui-https.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-ui-https.tls.certresolver: dns-cloudflare
      traefik.http.services.bitwarden-ui-svc.loadbalancer.server.port: 80
      # Enable OAuth
      traefik.http.routers.bitwarden-ui-https.middlewares: chain-oauth@file
      # Disable OAuth
      # traefik.http.routers.bitwarden-ui-https.middlewares: chain-no-auth@file
      # Websocket
      traefik.http.routers.bitwarden-websocket-http.entrypoints: http
      traefik.http.routers.bitwarden-websocket-http.middlewares: redirect-https
      traefik.http.routers.bitwarden-websocket-http.service: bitwarden-websocket-svc
      traefik.http.routers.bitwarden-websocket-http.rule: Host(`bitwarden.$DOMAINNAME`) && PathPrefix(`/notifications/hub`)
      traefik.http.routers.bitwarden-websocket-https.entrypoints: https
      traefik.http.routers.bitwarden-websocket-https.rule: Host(`bitwarden.$DOMAINNAME`) && PathPrefix(`/notifications/hub`)
      traefik.http.routers.bitwarden-websocket-https.service: bitwarden-websocket-svc
      traefik.http.routers.bitwarden-websocket-https.tls.certresolver: dns-cloudflare
      traefik.http.services.bitwarden-websocket-svc.loadbalancer.server.port: 3012
      # Redirect
      traefik.http.middlewares.redirect-https.redirectScheme.permanent: true
      traefik.http.middlewares.redirect-https.redirectScheme.scheme: https
      # OAuth Bypass
      traefik.http.routers.bitwarden-rtr-bypass.entrypoints: https
      # FIXME - May also need PathPrefix(`/api/accounts/prelogin`)
      traefik.http.routers.bitwarden-rtr-bypass.rule: "Host(`bitwarden.$DOMAINNAME`) && (HeadersRegexp(`Origin`, `^(moz|safari-web|chrome)-extension://.*`) || HeadersRegexp(`User-Agent`, `Bitwarden_Mobile.*`) || PathPrefix(`/api/sync`))"
      traefik.http.routers.bitwarden-rtr-bypass.priority: 100
      traefik.http.routers.bitwarden-rtr-bypass.service: bitwarden-ui-svc
      traefik.http.routers.bitwarden-rtr-bypass.middlewares: chain-no-auth@file
      traefik.http.routers.bitwarden-rtr-bypass.tls.certresolver: dns-cloudflare

  # Backup service for bitwarden
  bitwarden_backup:
    image: bruceforce/bw_backup:latest
    container_name: bitwarden_backup
    restart: unless-stopped
    entrypoint:
      - entrypoint.sh
    network_mode: none
    volumes:
      - $DOCKERDIR/bitwarden:/data
    environment:
      - DB_FILE=/data/db.sqlite3
      - CRON_TIME=0 4 * * *
      - UID=$PUID
      - GID=$PGID
      - BACKUP_FILE=/data/db_backup/backup.sqlite3
      - BACKUP_FILE_PERMISSIONS=700
      - TIMESTAMP=false
      - LOGFILE=/app/log/backup.log
      # - CRONFILE=/etc/crontabs/root
    healthcheck:
      test: ["CMD-SHELL", "stat $${DB_FILE} $${BACKUP_FILE}"]
      interval: 120s
      timeout: 5s
      retries: 4

  # Container Management Service
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    command: -H tcp://socket-proxy:$SOCKET_PROXY_PORT
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
    networks:
      - traefik
      - socket_proxy
    ports:
      - "$PORTAINER_PORT:9000/tcp"
    volumes:
      - $DOCKERDIR/portainer:/data:rw
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.portainer-rtr.entrypoints: https
      traefik.http.routers.portainer-rtr.rule: Host(`portainer.$DOMAINNAME`)
      traefik.http.routers.portainer-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.portainer-rtr.middlewares: chain-oauth@file # Google OAuth 2.0
      traefik.http.routers.portainer-rtr.service: portainer-svc
      traefik.http.services.portainer-svc.loadbalancer.server.port: $PORTAINER_PORT

  # Reverse Proxy Service
  traefik:
    image: traefik:v2.5
    container_name: traefik
    entrypoint:
      - /entrypoint.sh
    command:
      - traefik
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      # - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      - --ping=true
      - --log=true
      - --log.level=WARN
      - --log.filePath=/logs/traefik.log
      - --log.format=common
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100
      # - --accessLog.format=json
      # - --accessLog.fields.defaultMode=keep
      # - --accessLog.fields.headers.defaultMode=keep
      # - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:$SOCKET_PROXY_PORT
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.defaultrule="Host(`{{ trimPrefix `/` .Name }}.$DOMAINNAME`)"
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Needed to enable unifi-controller TLS passthrough
      - --serversTransport.insecureSkipVerify=true
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1 # Pulls wildcard cert for second domain
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/letsencrypt/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # InfluxDB metrics exporter type.
      # - --metrics.influxdb=true
      # - --metrics.influxdb.address=influxdb:$INFLUXDB_PORT
      # - --metrics.influxdb.database=traefik
      # - --metrics.influxdb.pushinterval=30
      # Prometheus metrics exporter type.
      - --metrics.prometheus=true
    networks:
      traefik:
        ipv4_address: 172.19.0.254
      socket_proxy:
    ports:
      - "443:443/tcp"
      - "80:80/tcp"
      - "$TRAEFIK_PORT:8080/tcp"
    restart: unless-stopped
    volumes:
      # - $DOCKERDIR/traefik/traefik.yml:/etc/traefik/traefik.yml
      - $DOCKERDIR/traefik/letsencrypt:/letsencrypt
      - $DOCKERDIR/traefik/logs:/logs
      - $DOCKERDIR/traefik/rules:/rules
    secrets:
      - traefik_htpasswd
      - cloudflare_email
      - cloudflare_zone_api_key
      - cloudflare_dns_api_key
    environment:
      CF_API_EMAIL_FILE: /run/secrets/cloudflare_email
      # CF_API_KEY_FILE: /run/secrets/cloudflare_global_api_key
      CF_ZONE_API_TOKEN_FILE: /run/secrets/cloudflare_zone_api_key
      CF_DNS_API_TOKEN_FILE: /run/secrets/cloudflare_dns_api_key
      DOMAINNAME: $DOMAINNAME
      SERVER_IP: $SERVER_IP
      CLOUDKEY_IP: $CLOUDKEY_IP
      PRINTER_IP: $PRINTER_IP
      HDHOMERUN_IP: $HDHOMERUN_IP
      SYNOLOGY_IP: $SYNOLOGY_IP
      USG_IP: $USG_IP
      POWERWALL_IP: $POWERWALL_IP
      COCKPIT_IP: $COCKPIT_IP
      COCKPIT_PORT: $COCKPIT_PORT
      HOMEASSISTANT_IP: $HOMEASSISTANT_IP
      HOMEASSISTANT_PORT: $HOMEASSISTANT_PORT
      HOMEBRIDGE_IP: $HOMEBRIDGE_IP
      HOMEBRIDGE_PORT: $HOMEBRIDGE_PORT
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: false
      ## Traefik
      traefik.enable: true
      # traefik.docker.network: traefik
      # Basic auth admin password
      # traefik.http.middlewares.admin.basicauth.usersfile: /run/secrets/traefik_htpasswd
      # HTTP-to-HTTPS Redirect
      traefik.http.routers.http-catchall.entrypoints: http
      traefik.http.routers.http-catchall.rule: HostRegexp(`{host:.+}`)
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.routers.http-catchall.service: noop@internal
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      # Dashboard
      traefik.http.routers.traefik-rtr.entrypoints: https
      traefik.http.routers.traefik-rtr.rule: Host(`traefik.$DOMAINNAME`)
      traefik.http.routers.traefik-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.traefik-rtr.tls: true
      traefik.http.routers.traefik-rtr.middlewares: chain-oauth@file
      traefik.http.routers.traefik-rtr.service: api@internal
      traefik.http.services.api-svc.loadbalancer.server.port: 8080
      traefik.http.services.traefik-svc.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 60s
      timeout: 5s
      retries: 4

  # Unifi Controller and network management
  unifi-controller:
    container_name: unifi-controller
    entrypoint:
      - /init
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - HOME=/root
      - LANGUAGE=$LANG
      - LANG=$LANG
    image: linuxserver/unifi-controller
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.unifi-rtr.entrypoints: https
      traefik.http.routers.unifi-rtr.rule: Host(`unifi.$DOMAINNAME`)
      traefik.http.routers.unifi-rtr.tls.certresolver: dns-cloudflare
      # FIXME
      # traefik.http.routers.unifi-rtr.middlewares: chain-oauth@file
      traefik.http.routers.unifi-rtr.service: unifi-svc
      # FIXME - I don't believe the following is necesary
      # traefik.tcp.routers.unifi-rtr.tls.passthrough: true
      traefik.http.services.unifi-svc.loadbalancer.server.port: $UNIFI_PORT
      traefik.http.services.unifi-svc.loadbalancer.server.scheme: https
      traefik.http.services.unifi-svc.loadbalancer.server.url: https://$SERVER_IP
    networks:
      - traefik
    ports:
      - "10001:10001/udp"
      - "3478:3478/udp"
      - "6789:6789/tcp"
      - "8080:8080/tcp"
      - "8081:8081/tcp"
      - "$UNIFI_PORT:8443/tcp"
      - "8843:8843/tcp"
      - "8880:8880/tcp"
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/unifi-controller:/config
    working_dir: /usr/lib/unifi
    healthcheck:
      test: ["CMD", "curl", "-kILs", "--max-time", "5", "--fail", "https://localhost:$UNIFI_PORT"]
      interval: 30s
      timeout: 10s
      retries: 6

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik
    secrets:
      - source: traefik-forward-auth
        target: /config
    environment:
      - CONFIG=/config
      # - PROVIDERS_GOOGLE_CLIENT_ID=$PROVIDERS_GOOGLE_CLIENT_ID
      # - PROVIDERS_GOOGLE_CLIENT_SECRET=$PROVIDERS_GOOGLE_CLIENT_SECRET
      # - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$OAUTH_EMAIL_WHITELIST
      - LIFETIME=$OAUTH_LIFETIME
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.oauth-rtr.entrypoints: https
      traefik.http.routers.oauth-rtr.rule: Host(`oauth.$DOMAINNAME`)
      # traefik.http.routers.oauth-rtr.tls: true
      traefik.http.routers.oauth-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.oauth-rtr.middlewares: chain-oauth@file
      traefik.http.routers.oauth-rtr.service: oauth-svc
      traefik.http.services.oauth-svc.loadbalancer.server.port: 4181

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron
    container_name: docker-gc
    restart: unless-stopped
    networks:
      - socket_proxy
    volumes:
      - $DOCKERDIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 * * *
      FORCE_IMAGE_REMOVAL: 0
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:$SOCKET_PROXY_PORT

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    environment:
      TZ: $TZ
      WATCHTOWER_SCHEDULE: 0 0 2 * * *
      WATCHTOWER_LABEL_ENABLE: 1
      DOCKER_HOST: tcp://socket-proxy:$SOCKET_PROXY_PORT
    networks:
      - socket_proxy

  rsync-home:
    container_name: rsync-home
    image: dkruger/rsync-cron:latest
    restart: unless-stopped
    network_mode: none
    environment:
      - 'RSYNC_OPTIONS=-avz --delete'
      - 'RSYNC_CRONTAB=0 0 * * *'
      - RSYNC_UID=0
      - RSYNC_GID=0
    volumes:
      - $RSYNC_SRC:/rsync_src
      - $RSYNC_DST:/rsync_dst

  readarr:
    container_name: readarr
    image: hotio/readarr:nightly
    container_name: readarr
    restart: unless-stopped
    secrets:
      - readarr_apikey
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=002
      - READARR_APIKEY_FILE=/run/secrets/readarr_apikey
    volumes:
      - $DOCKERDIR/readarr:/config
      - $MEDIADIR/Books:/media
      - $MEDIADIR/Audiobooks:/audiobooks
      - $MEDIADIR/Downloads:/downloads
    networks:
      - traefik
    ports:
      - "$READARR_PORT:8787/tcp"
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.readarr-rtr.entrypoints: https
      traefik.http.routers.readarr-rtr.rule: Host(`readarr.$DOMAINNAME`)
      traefik.http.routers.readarr-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.readarr-rtr.middlewares: chain-oauth@file
      traefik.http.routers.readarr-rtr.service: readarr-svc
      traefik.http.services.readarr-svc.loadbalancer.server.port: $READARR_PORT
    healthcheck:
      test: ["CMD-SHELL", "curl --header @$${READARR_APIKEY_FILE} http://localhost:$READARR_PORT/api/v1/system/status"]
      interval: 120s
      timeout: 10s
      retries: 4

  lazylibrarian:
    image: ghcr.io/linuxserver/lazylibrarian
    container_name: lazylibrarian
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - $DOCKERDIR/lazylibrarian:/config
      - $MEDIADIR/Audiobooks:/audiobooks
      - $MEDIADIR/Books:/books
      - $MEDIADIR/Downloads:/downloads
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.lazylibrarian-rtr.entrypoints: https
      traefik.http.routers.lazylibrarian-rtr.rule: Host(`lazylibrarian.$DOMAINNAME`)
      traefik.http.routers.lazylibrarian-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.lazylibrarian-rtr.middlewares: chain-oauth@file
      traefik.http.routers.lazylibrarian-rtr.service: lazylibrarian-svc
      traefik.http.services.lazylibrarian-svc.loadbalancer.server.port: $LAZYLIBRARIAN_PORT
    networks:
      - traefik
    ports:
      - "$LAZYLIBRARIAN_PORT:5299/tcp"
    restart: unless-stopped

  # InfluxDB - Database for sensor data
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      metrics:
    ports:
      - "$INFLUXDB_PORT:8086"
    volumes:
      - "$DOCKERDIR/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro"
      - "$DOCKERDIR/influxdb/db:/var/lib/influxdb"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
    healthcheck:
      test: ["CMD", "curl", "-sl", "-I", "http://localhost:$INFLUXDB_PORT/ping"]
      interval: 120s
      timeout: 5s
      retries: 4

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    restart: unless-stopped
    environment:
      - HOST_PROC=/rootfs/proc
      - HOST_SYS=/rootfs/sys
      - HOST_ETC=/rootfs/etc
    security_opt:
      - no-new-privileges:true
    depends_on:
      - influxdb
    networks:
      socket_proxy:
      metrics:
    extra_hosts:
      - "powerwall:$POWERWALL_IP"
    volumes:
      - "$DOCKERDIR/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/proc:/rootfs/proc:ro"
      - "/sys:/rootfs/sys:ro"
      - "/etc:/rootfs/etc:ro"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
    healthcheck:
      # NOTE: requires outputs.health to be enabled in telegraf.conf
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 120s
      timeout: 5s
      retries: 4

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      traefik:
      metrics:
    depends_on:
      - influxdb
      - prometheus
    extra_hosts:
      - "powerwall:$POWERWALL_IP"
    user: "0"
    volumes:
      - $DOCKERDIR/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,natel-plotly-panel,blackmirror1-singlestat-math-panel,btplc-trend-box-panel,marcuscalidus-svg-panel,michaeldmoore-multistat-panel,yesoreyeram-boomtable-panel,ryantxu-ajax-panel,grafana-influxdb-flux-datasource,fetzerch-sunandmoon-datasource,andig-darksky-datasource,simpod-json-datasource"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.grafana-rtr.entrypoints: https
      traefik.http.routers.grafana-rtr.rule: Host(`grafana.$DOMAINNAME`)
      traefik.http.routers.grafana-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.grafana-rtr.middlewares: chain-oauth@file
      traefik.http.routers.grafana-rtr.service: grafana-svc
      traefik.http.services.grafana-svc.loadbalancer.server.port: $GRAFANA_PORT
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:$GRAFANA_PORT/api/health"]
      interval: 120s
      timeout: 5s
      retries: 4

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      # - "$DOCKERDIR/prometheus:/prometheus"
      - "$DOCKERDIR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      traefik:
    ports:
      - "$PROMETHEUS_PORT:9090"
    labels:
      # Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.prometheus-rtr.entrypoints: https
      traefik.http.routers.prometheus-rtr.rule: Host(`prometheus.$DOMAINNAME`)
      traefik.http.routers.prometheus-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.prometheus-rtr.middlewares: chain-oauth@file
      traefik.http.routers.prometheus-rtr.service: prometheus-svc
      traefik.http.services.prometheus-svc.loadbalancer.server.port: 9090
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:9090/-/healthy"]
      interval: 60s
      timeout: 5s
      retries: 4

  # Update cloudflare IP if/when the IP changes
  cloudflare-ddns:
    image: oznu/cloudflare-ddns
    container_name: cloudflare-ddns
    restart: unless-stopped
    networks:
      - default
    entrypoint:
      - /init
    environment:
      API_KEY_FILE: /run/secrets/cloudflare_dns_api_key
      ZONE: $DOMAINNAME
    secrets:
      - cloudflare_dns_api_key

  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cloudflare-companion:
    image: tiredofit/traefik-cloudflare-companion:latest
    container_name: cloudflare-companion
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - socket_proxy
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - TARGET_DOMAIN=$DOMAINNAME
      - DOMAIN1=$DOMAINNAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID
      - DOMAIN1_PROXIED=FALSE
      - DOCKER_HOST=tcp://socket-proxy:$SOCKET_PROXY_PORT
    secrets:
      - cf_token
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cloudflare-companion-rtr.rule=Host(`cockpit.$DOMAINNAME`) || Host(`homebridge.$DOMAINNAME`) || Host(`powerwall.$DOMAINNAME`) || Host(`printer.$DOMAINNAME`) || Host(`synology.$DOMAINNAME`) || Host(`cloudkey.$DOMAINNAME`) || Host(`usg.$DOMAINNAME`) || Host(`homeassistant.$DOMAINNAME`) || Host(`hdhomerun.$DOMAINNAME`)"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    restart: unless-stopped
    networks:
      socket_proxy:
        ipv4_address: 172.22.0.254 # You can specify a static IP
    privileged: true
    #ports:
    # - "127.0.0.1:$SOCKET_PROXY_PORT:$SOCKET_PROXY_PORT" # Port $SOCKET_PROXY_PORT should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "$SOCKET_PROXY_PORT:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Ouroboros
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
    healthcheck:
      test: ["CMD", "wget", "-Sq", "-O-", "http://localhost:$SOCKET_PROXY_PORT/_ping"]
      interval: 60s
      timeout: 5s
      retries: 4

  whoami:
    image: containous/whoami
    container_name: whoami
    restart: "no"
    networks:
      - traefik
    labels:
      # Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.whoami-rtr.entrypoints: https
      traefik.http.routers.whoami-rtr.rule: Host(`whoami.$DOMAINNAME`)
      traefik.http.routers.whoami-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.whoami-rtr.middlewares: chain-oauth@file
      traefik.http.routers.whoami-rtr.service: whoami-svc
      traefik.http.services.whoami-svc.loadbalancer.server.port: 80

  # Unifi poller for influxdb+grafana dashboards
  unifi-poller:
    image: golift/unifi-poller:latest
    container_name: unifi-poller
    restart: unless-stopped
    depends_on:
      - influxdb
      - unifi-controller
    networks:
      metrics:
    environment:
      - UP_INFLUXDB_URL=http://influxdb:${INFLUXDB_PORT}
      - UP_INFLUXDB_DB=${INFLUXDB_DB}
      # - UP_INFLUXDB_USER=${INFLUXDB_ADMIN_USER}
      # - UP_INFLUXDB_PASS=${INFLUXDB_ADMIN_PASSWORD}
      - UP_UNIFI_DEFAULT_URL=${UNIFI_URL}
      - UP_UNIFI_DEFAULT_USER=${UNIFI_USER}
      - UP_UNIFI_DEFAULT_PASS=${UNIFI_PASS}
      - UP_POLLER_DEBUG=${POLLER_DEBUG}
      - UP_UNIFI_DEFAULT_SAVE_DPI=${POLLER_SAVE_DPI}

  # Custom HTTP error handling
  error-handler:
    # image: maxisme/404:latest
    image: guillaumebriday/traefik-custom-error-pages
    container_name: error-handler
    restart: unless-stopped
    networks:
      traefik:
    labels:
      ## Auto-update
      com.centurylinklabs.watchtower.enable: true
      ## Traefik
      traefik.enable: true
      traefik.docker.network: traefik
      traefik.http.routers.error-handler-rtr.entrypoints: https
      traefik.http.routers.error-handler-rtr.rule: HostRegexp(`{catchall:.*}`)
      traefik.http.routers.error-handler-rtr.tls: true
      traefik.http.routers.error-handler-rtr.priority: 1
      traefik.http.routers.error-handler-rtr.tls.certresolver: dns-cloudflare
      traefik.http.routers.error-handler-rtr.middlewares: chain-no-auth@file
      traefik.http.routers.error-handler-rtr.service: error-handler-svc
      traefik.http.services.error-handler-svc.loadbalancer.server.port: 80

########################### SECRETS
secrets:
  traefik_htpasswd:
    file: $SECRETSDIR/traefik_htpasswd
  traefik-forward-auth:
    file: $SECRETSDIR/traefik-forward-auth
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cf_email:
    file: $SECRETSDIR/cloudflare_email
  cf_token:
    file: $SECRETSDIR/cloudflare_ddns_api_key
  cloudflare_dns_api_key:
    file: $SECRETSDIR/cloudflare_dns_api_key
  cloudflare_zone_api_key:
    file: $SECRETSDIR/cloudflare_zone_api_key
  pihole_password:
    file: $SECRETSDIR/pihole_password
  bitwarden_admin_token:
    file: $SECRETSDIR/bitwarden_admin_token
  radarr_apikey:
    file: $SECRETSDIR/radarr_apikey
  sonarr_apikey:
    file: $SECRETSDIR/sonarr_apikey
  lidarr_apikey:
    file: $SECRETSDIR/lidarr_apikey
  readarr_apikey:
    file: $SECRETSDIR/readarr_apikey
  plex_apitoken:
    file: $SECRETSDIR/plex_apitoken
  healthchecks_superuser_email:
    file: $SECRETSDIR/healthchecks_superuser_email
  healthchecks_superuser_password:
    file: $SECRETSDIR/healthchecks_superuser_password
  bitwarden_smtp_host:
    file: $SECRETSDIR/bitwarden_smtp_host
  bitwarden_smtp_from:
    file: $SECRETSDIR/bitwarden_smtp_from
  bitwarden_smtp_username:
    file: $SECRETSDIR/bitwarden_smtp_username
  bitwarden_smtp_password:
    file: $SECRETSDIR/bitwarden_smtp_password

########################### NETWORKS
networks:
  default:
    driver: bridge
  traefik:
    name: traefik
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/24
  pihole:
    name: pihole
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  metrics:
    name: metrics
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
